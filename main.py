from aiogram import Bot, Dispatcher, types, executor
from db import DataBase, gameMafia
import asyncio
import random
from datetime import datetime

bot = Bot("Tokem")
dp = Dispatcher(bot)

db = DataBase("mafia.db")
gm = gameMafia("mafia.db", bot)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
   await db.check_db(message)
   
   if message.text[7:]:
      
      check_game = db.cur.execute("SELECT users FROM game_room WHERE room_id = ?", (message.text.split("/start ")[1],)).fetchone()[0]
      
      if not str(message.from_user.id) in check_game:
         splited = message.text.split("/start ")[1]
         
         users = db.cur.execute("SELECT users FROM game_room WHERE room_id = ?", (splited,)).fetchone()
         
         db.cur.execute("UPDATE user_data SET room = ? WHERE user_id = ?", (f"game {splited}", message.from_user.id))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET users = ? WHERE room_id = ?", (f"{users[0]},{message.from_user.id}", splited))
         db.conn.commit()
         
         await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å")
      else:
         await message.answer("–í—ã –∏ —Ç–∞–∫ –∏–≥—Ä–∞–µ—Ç–µ")
   else:
      await message.answer("Hi")

@dp.message_handler(commands=["start_game"])
async def start_game(message: types.Message):
   await db.check_db(message)
   
   if not str(message.from_user.id) in gm.game_data:
      
      game_id = 0
      
      while True:
         try:
            db.cur.execute("INSERT INTO game_room (room_id, users, room_room, mafia, doctor, komisar, villager, dead, time) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)", (game_id, message.from_user.id, "None", "None", "None", "None", "None", "None", "0 –¥–µ–Ω—å"))
            db.conn.commit()
            break
         except Exception as e:
            game_id += 1
         
      users = db.cur.execute("SELECT * FROM game_room WHERE room_id = ?", (game_id,)).fetchone()
         
      userses = db.cur.execute("SELECT users FROM game_room WHERE room_id = ?", (game_id,)).fetchone()
      
      print(game_id)
      print(users)
      
      db.cur.execute("UPDATE user_data SET room = ? WHERE user_id = ?", (f"game {game_id}", message.from_user.id))
      db.conn.commit()
      
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è", url=f"https://t.me/constructor_robot_bot?start={game_id}"))
         
      isale = ",".join([db.cur.execute("SELECT first_name FROM user_data WHERE user_id = ?", (first_name_user,)).fetchone()[0] for first_name_user in userses[0].split(",")])
      
      msg = await message.answer(f"<b>–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n–ó–∞—à–ª–∏: {isale}\n{len(userses[0].split(','))} –∏–≥—Ä–æ–∫(–æ–≤)", reply_markup=markup)
         
      await bot.pin_chat_message(message.chat.id, msg.message_id)
      
      db.cur.execute("UPDATE game_room SET room_room = ? WHERE room_id = ?", ("waitUsers", game_id))
      db.conn.commit()
      
      while True:
         userses = db.cur.execute("SELECT users FROM game_room WHERE room_id = ?", (game_id,)).fetchone()
         try:
            isale = ",".join([db.cur.execute("SELECT first_name FROM user_data WHERE user_id = ?", (first_name_user,)).fetchone()[0] for first_name_user in userses[0].split(",")])
            
            await bot.edit_message_text(chat_id=message.chat.id, text=f"<b>–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n–ó–∞—à–ª–∏: {isale}\n{len(userses[0].split(','))} –∏–≥—Ä–æ–∫(–æ–≤)", message_id=msg.message_id, reply_markup=markup)
         except Exception as e:
            pass
            
         await asyncio.sleep(5)
            
         if len(userses[0].split(',')) > 3:
            
            asyncio.create_task(gm.selection(game_id, message))
            
            break
   else:
      await message.answer("–í—ã –∏ —Ç–∞–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ")

@dp.message_handler(content_types=["text"])
async def text(message: types.Message):
   id = message.from_user.id
   
   await db.check_db(message)
   
   if db.cur.execute("SELECT room FROM user_data WHERE user_id = ?", (id,)).fetchone()[0].startswith("game "):
      
      online_game_id = db.cur.execute("SELECT room FROM user_data WHERE user_id = ?", (id,)).fetchone()[0].split()
      
      game = db.cur.execute("SELECT users, dead FROM game_room WHERE room_id = ?", (online_game_id[1],)).fetchone()
      
      print(online_game_id)
      print(game)
      
      if str(id) in game[1].split(",") and online_game_id[2] == "dead":
         for user in game[0].split(","):
            if str(id) not in str(user):
               await bot.send_message(user, f"–ö—Ç–æ —Ç–æ –∏–∑ –∂–∏—Ç–µ–ª–µ–π –≤–∏–¥–µ–ª –∫–∞–∫ <a href='https://t.me/{message.from_user.username}'>{message.from_user.first_name}</a> –∫—Ä–∏—á–∞–ª:\n{message.text}")
               
               db.cur.execute("UPDATE user_data SET room = ? WHERE user_id = ?", (f"{online_game_id[:2]} deach", id))
               return db.conn.commit()
      
      try:
         if str(id) not in game[1].split(",") and online_game_id[2] != "deach":
            for user in game[0].split(","):
               if str(id) not in str(user):
                  await bot.send_message(user, f"<a href='https://t.me/{message.from_user.username}'>{message.from_user.first_name}</a>:\n{message.text}", parse_mode="html", disable_web_page_preview=True)
         else:
            for death in game[1].split(","):
               if str(id) not in death:
                  await bot.send_message(user, f"üíÄ <a href='https://t.me/{message.from_user.username}'>{message.from_user.first_name}</a>:\n{message.text}", parse_mode="html", disable_web_page_preview=True)
      except:
         pass

@dp.callback_query_handler(lambda call: call.data.startswith("kill "))
async def kill(call: types.CallbackQuery):
   await call.message.delete()
   
   splited = call.data.split()
   
   kill = db.cur.execute("SELECT * FROM game_room WHERE room_id = ?", (splited[3],)).fetchone()
   
   print(f"{splited} test")
   
   if str(splited[1]) in kill[3].split(","):
      if kill[7] == "None":
         db.cur.execute("UPDATE game_room SET dead = ? WHERE room_id = ?", (call.from_user.id, splited[3]))
         db.conn.commit()
      else:
         db.cur.execute("UPDATE game_room SET dead = ? WHERE room_id = ?", (f"{kill[7]},{call.from_user.id}", splited[3]))
         db.conn.commit()
      
      print("test")
      
      mafia = ""
      doctor = ""
      komisar = ""
      villager = ""
      
      for user in kill[3].split(","):
         try:
            if mafia:
               mafia += f",{db.cur.execute('SELECT first_name FROM user_data WHERE user_id = ?', (user,)).fetchone()[0]}"
            else:
               mafia += f"{db.cur.execute('SELECT first_name FROM user_data WHERE user_id = ?', (user,)).fetchone()[0]}"
         except:
            pass
      
      for user in kill[4].split(","):
         try:
            if doctor:
               doctor += f",{db.cur.execute('SELECT first_name FROM user_data WHERE user_id = ?', (user,)).fetchone()[0]}"
            else:
               doctor += f"{db.cur.execute('SELECT first_name FROM user_data WHERE user_id = ?', (user,)).fetchone()[0]}"
         except:
            pass
      
      for user in kill[5].split(","):
         try:
            if komisar:
               komisar += f",{db.cur.execute('SELECT first_name FROM user_data WHERE user_id = ?', (user,)).fetchone()[0]}"
            else:
               komisar += f"{db.cur.execute('SELECT first_name FROM user_data WHERE user_id = ?', (user,)).fetchone()[0]}"
         except:
            pass
      
      for user in kill[6].split(","):
         try:
            if villager:
               villager += f",{db.cur.execute('SELECT first_name FROM user_data WHERE user_id = ?', (user,)).fetchone()[0]}"
            else:
               villager += f"{db.cur.execute('SELECT first_name FROM user_data WHERE user_id = ?', (user,)).fetchone()[0]}"
         except:
            pass
      
      news = ["–ú–µ—Å—Ç–Ω—ã–π –≤—Ä–∞—á –æ–±—ä—è—Å–Ω–∏–ª, —á—Ç–æ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π —Å—Ç—Ä–∞–¥–∞–ª –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º, –∏ –º–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ —Å–æ–æ–±—â–∞–ª–∏, —á—Ç–æ –ø–æ –Ω–æ—á–∞–º —Å–ª—ã—à–∞–ª–∏, –∫–∞–∫ –æ–Ω –∫—Ä–∏—á–∞–ª –æ —á–µ–º-—Ç–æ, —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å –ø—Ä–∏–∑—Ä–∞–∫–∞–º–∏. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∏ '–ø—Ä–∏–∑—Ä–∞–∫–∏'' —Å—Ç–∞–ª–∏ –ø—Ä–∏—á–∏–Ω–æ–π —Å—É–∏—Ü–∏–¥–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ. –ú–µ—Å—Ç–Ω–∞—è –ø–æ–ª–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.", "–ú–µ—Å—Ç–Ω–∞—è –ø–æ–ª–∏—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –≤ –æ—Å–æ–±–Ω—è–∫–µ –º–∞—Ñ–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–≥–∞–¥–æ—á–Ω—ã—Ö —Å–ª–µ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ –º–µ–Ω–µ–µ –¥–µ—Å—è—Ç–∫–∞. –ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É, –Ω–∞—Å—á–∏—Ç—ã–≤–∞—é—â—É—é –æ–∫–æ–ª–æ –¥–≤–∞–¥—Ü–∞—Ç–∏ —É–±–∏–π—Ü. –û–¥–Ω–∞–∫–æ, –∫ –º–æ–º–µ–Ω—Ç—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è, –±—ã–ª–æ —É–∂–µ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ: –º–∞—Ñ–∏–æ–∑–Ω—ã–µ —á–ª–µ–Ω—ã, –º–µ–∂–¥—É –∑—É–±–∞–º–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–µ–ª–µ–Ω–∞, —Ä–∞–∑–¥–∞–≤–∏–ª–∏ –µ–µ, –≤—ã—Å–≤–æ–±–æ–¥–∏–≤ —è–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã—Å—Ç—Ä–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª—Å—è –ø–æ –∏—Ö —Ç–µ–ª–∞–º. –ò–Ω—Ü–∏–¥–µ–Ω—Ç –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–∞—Å—Ç–æ–ª—å–∫–æ –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ, —á—Ç–æ –ø–æ–ª–∏—Ü–∏—è –Ω–µ —Å–º–æ–≥–ª–∞ –¥–∞–∂–µ –Ω–∞—á–∞—Ç—å –¥–æ–ø—Ä–æ—Å: –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–±–∏–π—Ü—ã —É—Å–ª—ã—à–∞–ª–∏ —à–∞–≥–∏ –∏, –æ–ø–∞—Å–∞—è—Å—å –±—ã—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç—ã–º–∏, –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ. –ú–µ—Å—Ç–Ω–∞—è –ø–æ–ª–∏—Ü–∏—è —É–∂–µ –ø—Ä–æ–≤–æ–¥–∏—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞."]
      
      for user in kill[1].split(","):
         await bot.send_message(user, f"<b>–ú–∞—Ñ–∏—è —Å—É–µ—Ü–∏–¥–Ω—É–ª—Å—è</b>\n\n{random.choice(news)}\n\nüë®‚Äçüåæ<b>–ú–ò–†–ù–´–ï –ü–û–ë–ï–î–ò–õ–ò</b>\n\nüßõ‚Äç‚ôÇÔ∏è–ú–∞—Ñ–∏—è-{mafia}\nüë®‚Äç‚öïÔ∏è–î–æ–∫—Ç–æ—Ä-{doctor}\nüëÆ‚Äç‚ôÇÔ∏è–®—ç—Ä–∏—Ñ-{komisar}\nüë®‚Äçüåæ–ñ–∏—Ç–µ–ª–∏-{villager}")
      
      db.cur.execute(f"DELETE FROM game_room WHERE room_id LIKE {splited[3]}")
      db.conn.commit()
   else:
      if kill[7] == "None":
         db.cur.execute("UPDATE game_room SET dead = ? WHERE room_id = ?", (splited[1], splited[3]))
         db.conn.commit()
      else:
         db.cur.execute("UPDATE game_room SET dead = ? WHERE room_id = ?", (f"{kill[7]},{splited[1]}", splited[3]))
         db.conn.commit()
      
      await bot.send_message(splited[1], "–í–∞—Å —É–±–∏–ª–∏")
      
      gamesid = db.cur.execute("SELECT room FROM user_data WHERE user_id = ?", (splited[1],)).fetchone()[0]
      
      db.cur.execute("UPDATE user_data SET room = ? WHERE user_id = ?", (f"{gamesid.split()[:2]} dead", splited[1]))
      db.conn.commit()
      
      db.cur.execute("UPDATE game_room SET room_room = ? WHERE room_id = ?", ("waitActionsKomisar", splited[3]))
      db.conn.commit()

@dp.callback_query_handler(lambda call: call.data.startswith("check "))
async def check(message: types.Message):
   await call.message.delete()
   
   splited = call.data.split()
   
   user = db.cur.execute("SELECT first_name FROM user_data WHERE user_id = ?", (splited[1],)).fetchone()
   
   role_name = db.cur.execute("SELECT mafia, doctor, komisar, villager, history_role_for_komisar, is_check FROM game_room WHERE room_id = ?", (splited[3],)).fetchone()
   
   name = db.cur.execute("SELECT first_name FROM user_data WHERE user_id = ?", (splited[1],)).fetchone()
   
   if str(splited[1]) in role_name[0]:
      if role_name[4] == "None":
         db.cur.execute("UPDATE game_room SET history_role_for_komisar = ? WHERE room_id = ?", (f"{name[0]}-–º–∞—Ñ–∏—è", splited[3]))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET is_check = ? WHERE room_id = ?", (f"{splited[1]}", splited[3]))
         db.conn.commit()
      else:
         db.cur.execute("UPDATE game_room SET history_role_for_komisar = ? WHERE room_id = ?", (f"{role_name[4]},{name[0]}-–º–∞—Ñ–∏—è", splited[3]))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET is_check = ? WHERE room_id = ?", (f"{role_name[5]},{splited[1]}", splited[3]))
         db.conn.commit()
      
      await call.message.answer(f"{name[0]}-–º–∞—Ñ–∏—è")
         
   elif str(splited[1]) in role_name[1]:
      if role_name[4] == "None":
         db.cur.execute("UPDATE game_room SET history_role_for_komisar = ? WHERE room_id = ?", (f"{name[0]}-–¥–æ–∫—Ç–æ—Ä", splited[3]))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET is_check = ? WHERE room_id = ?", (f"{splited[1]}", splited[3]))
         db.conn.commit()
      else:
         db.cur.execute("UPDATE game_room SET history_role_for_komisar = ? WHERE room_id = ?", (f"{role_name[4]},{name[0]}-–¥–æ–∫—Ç–æ—Ä", splited[3]))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET is_check = ? WHERE room_id = ?", (f"{role_name[5]},{splited[1]}", splited[3]))
         db.conn.commit()
      
      await call.message.answer(f"{name[0]}-–¥–æ–∫—Ç–æ—Ä")
         
   elif str(splited[1]) in role_name[2]:
      if role_name[4] == "None":
         db.cur.execute("UPDATE game_room SET history_role_for_komisar = ? WHERE room_id = ?", (f"{name[0]}-—à—ç—Ä–∏—Ñ", splited[3]))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET is_check = ? WHERE room_id = ?", (f"{splited[1]}", splited[3]))
         db.conn.commit()
      else:
         db.cur.execute("UPDATE game_room SET history_role_for_komisar = ? WHERE room_id = ?", (f"{role_name[4]},{name[0]}-—à—ç—Ä–∏—Ñ", splited[3]))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET is_check = ? WHERE room_id = ?", (f"{role_name[5]},{splited[1]}", splited[3]))
         db.conn.commit()
      
      await call.message.answer(f"{name[0]}-—à—ç—Ä–∏—Ñ")
         
   elif str(splited[1]) in role_name[3]:
      if role_name[4] == "None":
         db.cur.execute("UPDATE game_room SET history_role_for_komisar = ? WHERE room_id = ?", (f"{name[0]}-–∂–∏—Ç–µ–ª—å", splited[3]))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET is_check = ? WHERE room_id = ?", (f"{splited[1]}", splited[3]))
         db.conn.commit()
      else:
         db.cur.execute("UPDATE game_room SET history_role_for_komisar = ? WHERE room_id = ?", (f"{role_name[4]},{name[0]}-–∂–∏—Ç–µ–ª—å", splited[3]))
         db.conn.commit()
         
         db.cur.execute("UPDATE game_room SET is_check = ? WHERE room_id = ?", (f"{role_name[5]},{splited[1]}", splited[3]))
         db.conn.commit()
      
      await call.message.answer(f"{name[0]}-–∂–∏—Ç–µ–ª—å")
   
   db.cur.execute("UPDATE game_room SET room_room = ? WHERE room_id = ?", ("waitActionsDoctor", splited[3]))
   db.conn.commit()

@dp.callback_query_handler(lambda call: call.data.startswith("cure "))
async def cure(call: types.CallbackQuery):
   await call.message.delete()
   
   splited = call.data.split()
   
   cure = db.cur.execute("SELECT dead FROM game_room WHERE room_id = ?", (splited[3],)).fetchone()[0]
   
   if splited[1] in cure:
      dead = cure.split(",")
      
      dead.remove(splited[1])
      
      db.cur.execute("UPDATE game_room SET dead = ? WHERE room_id = ?", (",".join(dead), splited[3]))
      db.conn.commit()
      
      await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ª–µ—á–∏–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
   else:
      await call.message.answer("–ü–∞—Ü–∏–µ–Ω—Ç –±—ã–ª –∑–¥–æ—Ä–æ–≤")
   
   db.cur.execute("UPDATE game_room SET room_room = ? WHERE room_id = ?", ("EndNight", splited[3]))
   db.conn.commit()

@dp.callback_query_handler(lambda call: call.data.startswith("vote "))
async def vote(call: types.CallbackQuery):
   await call.message.delete()
   
   splited = call.data.split()
   
   vote = db.cur.execute("SELECT vote, who_voted FROM game_room WHERE room_id = ?", (splited[3],)).fetchone()
   
   if str(call.from_user.id) not in vote[0]:
      if vote[1] == "None":
         db.cur.execute("UPDATE game_room SET who_voted = ? WHERE room_id = ?", (call.from_user.id, splited[3]))
      else:
         db.cur.execute("UPDATE game_room SET who_voted = ? WHERE room_id = ?", (f"{vote[1]},{call.from_user.id}", splited[3]))
      
      db.conn.commit()
      
      output = ""
      for voted_user in vote[0].split(","):
         if splited[1] in voted_user:
            quantity_vote = int(voted_user.split("-")[1]) + 1
            result = f"{voted_user.split('-')[0]}-{quantity_vote}"
            
            if not output:
               output += result
            else:
               output += f",{result}"
      
      db.cur.execute("UPDATE game_room SET vote = ? WHERE room_id = ?", (output, splited[3]))
      db.conn.commit()
      
      await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏")

if "__main__" == __name__:
   
   loop = asyncio.get_event_loop()
   
   executor.start_polling(dp)
   
   loop.run_forever()
